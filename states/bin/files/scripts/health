#!/usr/bin/env bash
###
# Bash script for gathering information from a very specific health API.
#
# The base assumptions for using this are the following...
# 1. Install httpie & jq.
# 2. Export the APIs basic auth password into a variable called `STATUS_PASS`.
# 3. Execute the script with desire arguments against an endpoint.
# 4. The endpoint MUST return JSON, and if using some of the provided switches the
#    script expects an 'environment', 'deployment', and 'server' keys at top level.
###

function usage() {
    echo "Usage:"
    echo "    $0 -h                      Display this help message."
    echo "    $0 status <url>            URL to check status of. Return full JSON."
    echo "    $0 status <url> -r         Filter to Rails version."
    echo "    $0 status <url> -R         Filter to Ruby version."
    echo "    $0 status <url> -l         Filter to last deployed data."
    echo "    $0 status <url> -s         Filter to Server data."
    exit 0
}

function sanity() {
  # Validate a subcommand was passed
  if [ -z ${1} ]; then usage; fi

  if [ $(which jq &>/dev/null) ] && [ $(which http &>/dev/null) ]; then
    echo "Please install jq and http."
    echo "    $ brew install jq httpie"
    exit 1
  fi

  if [ -z $STATUS_PASS ]; then
    echo "Please export STATUS_PASS environment variable and try again."
    echo "  $ read -s STATUS_PASS && export STATUS_PASS"
    exit 1
  fi
}

function check_status() {
  # $1: endpoint/app url to to check status of
  # $2: jq filter
  if [ ! -z ${2} ]; then
    http ${1}/health/status --auth status:${STATUS_PASS} | jq ${2}
  else
    http ${1}/health/status --auth status:${STATUS_PASS} 
  fi
}

# Run Sanity
sanity $@

while getopts ":h" opt; do
  case ${opt} in
    h )
      usage
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 2
      ;;
  esac
done
shift $((OPTIND -1))

subcommand=$1; shift  # Remove '$0' from the argument list
case "$subcommand" in
  status)
    url=$1; shift # Remove 'status' from argument list

    # If no additional arguments, check status for full JSON
    if [ -z $@ ]; then
      check_status $url
    fi

    # Process package options
    while getopts "rRls" opt; do
      case ${opt} in
        r )
          # Rails (url | jq filter)
          check_status $url ".environment.rails"
          ;;
        R )
          # Ruby (url | jq filter)
          check_status $url ".environment.ruby"
          ;;
        l )
          # Last deployment (url | jq filter)
          check_status $url ".deployments[0]"
          ;;
        s )
          # Last deployment (url | jq filter)
          check_status $url ".server"
          ;;
        \? )
          echo "Invalid Option: -$OPTARG" 1>&2
          exit 3
          ;;
      esac
    done
    shift $((OPTIND -1))
    ;;
  * )
    usage
esac
