#!/usr/bin/env python3
"""
This is intended to be used to generate an AWS_SESSION_TOKEN and automatically write to your 
AWS_CREDENTIALS file (default: ~/.aws/credentials). 

This code is essentially just getting the output of `aws sts get-session-token`, using a
"base" account for requesting tokens, and writing it to an 'active session' profile.

For example, consider the following ~/.aws/credentials file.
```toml
[base_staging]
aws_access_key_id=<secret>
aws_secret_access_key<super_secret>
```

Running this code with the following command
`aws-gen-session staging <mfa_6_digit_code>`

Will cause ~/.aws/credentials to be written to with the following:
```toml
[base_staging]
aws_access_key_id=<secret>
aws_secret_access_key<super_secret>

[staging]
aws_access_key_id=<generated_secret_corresponding_to_session>
aws_secret_access_key<super_generated_secret_corresponding_to_session>
aws_session_token=<secret_session_token>
```

This allows the user to run this command to generate a, by default, 1 day session and use 
the generated AWS_PROFILE to issue commands in newly spawned shells.
"""

import os
import sys
import configparser

try:
    import boto3
except ImportError:
    print("Error importing boto3. Please run 'pip install boto3'")
    sys.exit(1)

# Locaton for AWS Credentials file
AWS_CREDENTIALS = f"{os.environ['HOME']}/.aws/credentials"

# AWS Accounts -> 'AWS_PROFILE' : 'AWS Account ID'
AWS_ACCOUNTS = {"staging": "123412341234" }

# AWS Base Account Prefix... For example, if requesting a session for an AWS_PROFILE named 'staging'
# there is an expectation of an AWS_PROFILE named 'AWS_PREFIX' + 'staging'.
AWS_PREFIX = "base_"  # in the above example, expect 'base_staging'

# Session Duration
DURATION_SECONDS = 86400


def generate_aws_session(aws_profile, mfa_token):
    """ Generate an AWS Session """

    # Format MFA Serial Number string for session generation
    aws_mfa_serial_number = f"arn:aws:iam::{AWS_ACCOUNTS[aws_profile]}:mfa/{os.environ['USER']}"

    # Create a new session using the assumed AWS_PREFIX base account
    aws_session = boto3.session.Session(profile_name=AWS_PREFIX + aws_profile)

    # Create sts client
    sts = aws_session.client("sts")
    # Fetch session dict, read in 'Credentials' key
    data = sts.get_session_token(
        DurationSeconds=DURATION_SECONDS, SerialNumber=aws_mfa_serial_number, TokenCode=mfa_token
    )["Credentials"]

    # Form struct for AWS_PROFILE replacement values
    session = {
        "aws_access_key_id": data["AccessKeyId"],
        "aws_secret_access_key": data["SecretAccessKey"],
        "aws_session_token": data["SessionToken"],
    }

    return session


def main(args):

    # Generate a new session for profile
    session = generate_aws_session(args.aws_profile, args.mfa_token)

    # Read AWS_CREDENTIALS into ConfigParser object
    aws_creds = configparser.ConfigParser()
    aws_creds.read(AWS_CREDENTIALS)

    # Add the AWS_PROFILE if it doesn't exist within the config
    if args.aws_profile not in aws_creds.sections():
        aws_creds.add_section(args.aws_profile)

    # Clear out the previous values
    aws_creds[args.aws_profile].clear()

    # Update with new values
    aws_creds[args.aws_profile].update(session)

    with open(AWS_CREDENTIALS, "w") as creds_file:
        # Write in-memory modified values to disk
        aws_creds.write(creds_file)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("aws_profile", help="AWS Profile to generate session for.")
    parser.add_argument("mfa_token", help="MFA Token to generate a session for.")
    parsed_args = parser.parse_args()

    # Pass AWS_PROFILE
    main(parsed_args)
